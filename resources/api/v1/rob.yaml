swagger: "2.0"
info:
  description: "API specification for the Web server of the Reproducible Open Benchmarks for Data Analysis platform."
  version: "0.1.0"
  title: "Reproducible Open Benchmarks - Web API"
  contact:
    email: "heiko.muller@gmail.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
# -----------------------------------------------------------------------------
# Base URL
# -----------------------------------------------------------------------------
schemes:
- "http"
host: "localhost:5000"
basePath: "/rob/api/v1"
# -----------------------------------------------------------------------------
# Grouping of API Routes
# -----------------------------------------------------------------------------
tags:
- name: "service"
  description: "Service description"
- name: "benchmark"
  description: "Benchmark workflow templates"
- name: "submission"
  description: "User submissions for benchmarks"
- name: "run"
  description: "Workflow runs"
- name: "file"
  description: "Uploaded files for benchmark submissions"
- name: "user"
  description: "Authenticate and register users"
# -----------------------------------------------------------------------------
# API Routes
# -----------------------------------------------------------------------------
paths:
# -- Service ------------------------------------------------------------------
  /:
    get:
      tags:
      - "service"
      summary: "Service descriptor"
      description: "Get service descriptor"
      operationId: "serviceDescriptor"
      produces:
      - "application/json"
      responses:
        200:
          description: "Service descriptor"
          schema:
            $ref: "#/definitions/ServiceDescriptor"
      security:
        - api_key: []
# -- Benchmarks ---------------------------------------------------------------
  /benchmarks:
    get:
      tags:
      - "benchmark"
      summary: "List benchmarks"
      description: "Get listing of all current benchmark"
      operationId: "listBenchmarks"
      produces:
      - "application/json"
      responses:
        200:
          description: "Listing of benchmark descriptors"
          schema:
            $ref: "#/definitions/BenchmarkListing"
  /benchmarks/{benchmarkId}:
    get:
      tags:
      - "benchmark"
      summary: "Get benchmark handle"
      description: "Get handle for the given benchmark"
      operationId: "getBenchmark"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "benchmarkId"
        description: "Unique benchmark identifier"
        required: true
        type: string
      responses:
        200:
          description: "Benchmark handle"
          schema:
            $ref: "#/definitions/BenchmarkHandle"
        404:
          description: "Unknown benchmark"
  /benchmarks/{benchmarkId}/leaderboard:
    get:
      tags:
      - "benchmark"
      summary: "Get benchmark leader board"
      description: "Get full leader board for the given benchmark"
      operationId: "benchmarkLeaderboard"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "benchmarkId"
        description: "Unique benchmark identifier"
        required: true
        type: string
      - in: "query"
        name: "orderBy"
        description: "List of result column names to order by (can include optional sort order). Format is columnName[:ASC|DESC],"
        required: false
        type: string
      - in: "query"
        name: "includeAll"
        description: "Include all results (if true) or only one per submission (if false)"
        required: false
        type: boolean
      responses:
        200:
          description: "Benchmark leaderboard"
          schema:
            $ref: "#/definitions/BenchmarkLeaderboard"
        400:
          description: "Invalid sort statement"
        404:
          description: "Unknown benchmark"
  /benchmarks/{benchmarkId}/downloads/archive:
    get:
      tags:
      - "benchmark"
      summary: "Download resource file archive"
      description: "Download a tar archive containing all benchmark resource file"
      operationId: "downloadResourceArchive"
      produces:
      - "application/gzip"
      parameters:
      - in: "path"
        name: "benchmarkId"
        description: "Unique benchmark identifier"
        required: true
        type: string
      responses:
        200:
          description: "File"
        404:
          description: "Unknown benchmark resource"
  /benchmarks/{benchmarkId}/downloads/resources/{resourceId}:
    get:
      tags:
      - "benchmark"
      summary: "Download resource file"
      description: "Download a benchmark resource file"
      operationId: "downloadResource"
      produces:
      - "text/csv"
      - "image/png"
      parameters:
      - in: "path"
        name: "benchmarkId"
        description: "Unique benchmark identifier"
        required: true
        type: string
      - in: "path"
        name: "resourceId"
        description: "Unique resource identifier"
        required: true
        type: string
      responses:
        200:
          description: "File"
        404:
          description: "Unknown benchmark resource"
# -- Submissions --------------------------------------------------------------
  /benchmarks/{benchmarkId}/submissions:
    get:
      tags:
      - "submission"
      summary: "List submissions for benchmark"
      description: "Get a list of all submissions for a given benchmark"
      operationId: "listSubmissions"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "benchmarkId"
        description: "Unique benchmark identifier"
        required: true
        type: string
      responses:
        200:
          description: "Submission listing"
          schema:
            $ref: "#/definitions/SubmissionListing"
        403:
          description: "Forbidden operation"
      security:
        - api_key: []
    post:
      tags:
      - "submission"
      summary: "Create submission"
      description: "Create a new submission for a benchmark"
      operationId: "createSubmission"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "benchmarkId"
        description: "Unique benchmark identifier"
        required: true
        type: string
      - name: body
        in: body
        required: true
        description: Submission name and members
        schema:
            type: object
            required:
            - name
            properties:
              name:
                type: string
              members:
                type: array
                items:
                  type: string
              parameters:
                type: array
                items:
                  $ref: '#/definitions/BenchmarkParameter'
      responses:
        201:
          description: "Submission handle"
          schema:
            $ref: "#/definitions/SubmissionHandle"
        400:
          description: "Invalid submission statement"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown benchmark"
      security:
        - api_key: []
  /submissions:
    get:
      tags:
      - "submission"
      summary: "List user submissions"
      description: "List all submissions that a user is a member of"
      operationId: "listUserSubmissions"
      produces:
      - "application/json"
      responses:
        200:
          description: "Submission listing"
          schema:
            $ref: "#/definitions/SubmissionListing"
        403:
          description: "Forbidden operation"
      security:
        - api_key: []
  /submissions/{submissionId}:
    delete:
      tags:
      - "submission"
      summary: "Delete submission"
      description: "Delete a submission"
      operationId: "deleteSubmission"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      responses:
        204:
          description: "Submission deleted"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission"
      security:
        - api_key: []
    get:
      tags:
      - "submission"
      summary: "Get submission handle"
      description: "Get handle for the given submission"
      operationId: "getSubmission"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      responses:
        200:
          description: "Submission handle"
          schema:
            $ref: "#/definitions/SubmissionHandle"
        404:
          description: "Unknown submission"
      security:
        - api_key: []
    put:
      tags:
      - "submission"
      summary: "Update submission"
      description: "Update submission name and member list"
      operationId: "updateSubmission"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      - name: body
        in: body
        required: true
        description: Submission name and members
        schema:
            type: object
            properties:
              name:
                type: string
              members:
                type: array
                items:
                  type: string
      responses:
        200:
          description: "Updated submission handle"
          schema:
            $ref: "#/definitions/SubmissionHandle"
        400:
          description: "Invalid submission statement"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission/user"
      security:
        - api_key: []
# -- Runs ---------------------------------------------------------------------
  /submissions/{submissionId}/runs:
    get:
      tags:
      - "run"
      summary: "List submission runs"
      description: "Get listing of all runs for the given submission"
      operationId: "getSubmissionRuns"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      responses:
        200:
          description: "Run listing"
          schema:
            $ref: "#/definitions/RunListing"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission"
      security:
        - api_key: []
    post:
      tags:
      - "run"
      summary: "Run benchmark"
      description: "Submit arguments for a new benchmark run"
      operationId: "runBenchmark"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      - name: body
        in: body
        required: true
        description: Run arguments
        schema:
          type: object
          required:
          - arguments
          properties:
            arguments:
              type: array
              items:
                $ref: '#/definitions/RunArgument'
      responses:
        201:
          description: "Run state"
          schema:
            $ref: "#/definitions/RunHandle"
        400:
          description: "Invalid argument list"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission"
      security:
        - api_key: []
  /submissions/{submissionId}/runs/poll:
    get:
      tags:
      - "run"
      summary: "Poll runs state"
      description: "Get listing of all runs in a given state"
      operationId: "pollSubmissionRuns"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      - in: "query"
        name: "state"
        description: "Run state identifier"
        required: false
        type: string
      responses:
        200:
          description: "Run identifier listing"
          schema:
            $ref: "#/definitions/RunIdentifierListing"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission"
      security:
        - api_key: []
  /runs/{runId}:
    delete:
      tags:
      - "run"
      summary: "Delete run"
      description: "Delete an inactive run"
      operationId: "deleteRun"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "runId"
        description: "Unique run identifier"
        required: true
        type: string
      responses:
        204:
          description: "Run deleted"
        400:
          description: "Invalid request for run state"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown run"
      security:
        - api_key: []
    get:
      tags:
      - "run"
      summary: "Get run"
      description: "Get state and timestamps for a given run"
      operationId: "getRun"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "runId"
        description: "Unique run identifier"
        required: true
        type: string
      responses:
        200:
          description: "Run handle"
          schema:
            $ref: "#/definitions/RunHandle"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown run"
      security:
        - api_key: []
    put:
      tags:
      - "run"
      summary: "Cancel run"
      description: "Cancel execution of an active run"
      operationId: "cancelRun"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "runId"
        description: "Unique run identifier"
        required: true
        type: string
      - name: body
        in: body
        required: true
        description: Run arguments
        schema:
          type: object
          properties:
            reason:
              type: string
      responses:
        200:
          description: "Run handle"
          schema:
            $ref: "#/definitions/RunHandle"
        400:
          description: "Invalid request for run state"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown run"
      security:
        - api_key: []
  /runs/{runId}/downloads/archive:
    get:
      tags:
      - "run"
      summary: "Download result file archive"
      description: "Download a tar archive containing all result files generated by a workflow run"
      operationId: "downloadRunResultArchive"
      produces:
      - "application/gzip"
      parameters:
      - in: "path"
        name: "runId"
        description: "Unique run identifier"
        required: true
        type: string
      responses:
        200:
          description: "File"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown run"
  /runs/{runId}/downloads/resources/{resourceId}:
    get:
      tags:
      - "run"
      summary: "Download result file"
      description: "Download a result file from a successful workflow run"
      operationId: "downloadResultFile"
      produces:
      - "text/csv"
      - "application/gzip"
      parameters:
      - in: "path"
        name: "runId"
        description: "Unique run identifier"
        required: true
        type: string
      - in: "path"
        name: "resourceId"
        description: "Unique resource identifier"
        required: true
        type: string
      responses:
        200:
          description: "File"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown run or resource"
# -- Uploads ------------------------------------------------------------------
  /submissions/{submissionId}/files:
    get:
      tags:
      - "file"
      summary: "List files"
      description: "List all files that have been uploaded for a submission"
      operationId: "listFiles"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      responses:
        200:
          description: "List of uploaded files"
          schema:
            $ref: "#/definitions/FileListing"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission"
      security:
        - api_key: []
    post:
      tags:
      - "file"
      summary: "Upload file"
      description: "Upload a file to be available for future submissions"
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      - in: "formData"
        name: "file"
        description: "Uploaded file"
        required: true
        type: file
      - in: "formData"
        name: "file_type"
        description: "File mimetype"
        required: false
        type: "string"
      responses:
        201:
          description: "Handle for uploaded file"
          schema:
            $ref: "#/definitions/FileHandle"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission"
        413:
            description: "Uploaded file size exceeds limit"
      security:
        - api_key: []
  /submissions/{submissionId}/files/{fileId}:
    delete:
      tags:
      - "file"
      summary: "Delete file"
      description: "Delete a previously uploaded file"
      operationId: "deleteFile"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      - in: "path"
        name: "fileId"
        description: "Unique file identifier"
        required: true
        type: string
      responses:
        204:
          description: "List of uploaded files"
        403:
          description: "Forbidden operation"
        404:
          description: "Unknown submission or file"
      security:
        - api_key: []
    get:
      tags:
      - "file"
      summary: "Download file"
      description: "Download a previously uploaded file"
      operationId: "downloadFile"
      produces:
      - "text/csv"
      - "application/gzip"
      parameters:
      - in: "path"
        name: "submissionId"
        description: "Unique submission identifier"
        required: true
        type: string
      - in: "path"
        name: "fileId"
        description: "Unique file identifier"
        required: true
        type: string
      responses:
        200:
          description: "File"
        404:
          description: "Unknown submission or file"
# -- Users --------------------------------------------------------------------
  /users:
    get:
      tags:
      - "user"
      summary: "List users"
      description: "Query listing of registered users"
      operationId: "listUsers"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "query"
        description: "User name"
        required: false
        type: string
      responses:
        200:
          description: "Query result"
          schema:
            $ref: "#/definitions/UserListing"
        403:
          description: "Forbidden operation"
      security:
        - api_key: []
  /users/activate:
    post:
      tags:
      - "user"
      summary: "Activate a new user"
      description: "Activate a newly registered user"
      operationId: "activateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Identifier for a registered user"
        required: true
        schema:
          type: object
          description: "Unique user identifier"
          required:
          - id
          properties:
            id:
              type: string
      responses:
        200:
          description: "User activated successfully"
          schema:
            $ref: "#/definitions/UserHandle"
        404:
          description: "Unknown user"
  /users/login:
    post:
      tags:
      - "user"
      summary: "User login"
      description: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User name and password"
        required: true
        schema:
          $ref: "#/definitions/UserCredentials"
      responses:
        200:
          description: "User logged in successfully"
          schema:
            $ref: "#/definitions/UserHandle"
        400:
          description: "Invalid username/password supplied"
        404:
          description: "Unknown user"
  /users/logout:
    post:
      tags:
      - "user"
      summary: "Logout user"
      description: "Logs current user out"
      operationId: "logoutUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "User logged out successfully"
          schema:
            $ref: "#/definitions/UserHandle"
        403:
          description: "Forbidden operation"
      security:
        - api_key: []
  /users/password/request:
    post:
      tags:
      - "user"
      summary: "Request password reset"
      description: "Get unique request identifier to reset user password"
      operationId: "requestPasswordReset"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User name"
        required: true
        schema:
          type: object
          required:
          - username
          properties:
            username:
              type: string
      responses:
        200:
          description: "User activated successfully"
          schema:
            type: object
            required:
            - requestId
            properties:
              requestId:
                type: string
  /users/password/reset:
    post:
      tags:
      - "user"
      summary: "Reset password"
      description: "Reset the password for a user following a password reset request"
      operationId: "resetPassword"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reset request identifier and new password"
        required: true
        schema:
          type: object
          required:
          - requestId
          - password
          properties:
            requestId:
              type: string
            password:
              type: string
      responses:
        200:
          description: "User activated successfully"
          schema:
            $ref: "#/definitions/UserHandle"
  /users/register:
    post:
      tags:
      - "user"
      summary: "Register user"
      description: "Create a new user"
      operationId: "registerUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User name and password"
        required: true
        schema:
          $ref: "#/definitions/UserRegistration"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserHandle"
        400:
          description: "Invalid or existing username supplied"
  /users/whoami:
    get:
      tags:
      - "user"
      summary: "Get user information"
      description: "Get information about user that is associated with the provided access token"
      operationId: "whoami"
      produces:
      - "application/json"
      responses:
        200:
          description: "User Handle"
          schema:
            $ref: "#/definitions/UserHandle"
        403:
          description: "Forbidden operation"
      security:
        - api_key: []
# ------------------------------------------------------------------------------
# Security
# ------------------------------------------------------------------------------
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
# ------------------------------------------------------------------------------
# Definition of data structures (models)
# ------------------------------------------------------------------------------
definitions:
  BenchmarkDescriptor:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      instructions:
        type: string
  BenchmarkHandle:
    type: object
    required:
    - id
    - name
    - parameters
    - submissions
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      instructions:
        type: string
      parameters:
        type: array
        items:
          $ref: '#/definitions/BenchmarkParameter'
      modules:
        type: array
        items:
          type: object
          required:
          - id
          - name
          - index
          properties:
            id:
              type: string
            name:
              type: string
            index:
              type: number
              format: int64
      postproc:
        $ref: "#/definitions/RunHandle"
      outputs:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            caption:
              type: string
      submissions:
        $ref: "#/definitions/SubmissionListing"
  BenchmarkLeaderboard:
    type: object
    description: "Ordered list of run results"
    required:
    - ranking
    - schema
    properties:
      ranking:
        type: array
        items:
          type: object
          required:
          - run
          - submission
          - results
          properties:
            run:
              type: object
              required:
              - id
              - createdAt
              - startedAt
              - finishedAt
              properties:
                id:
                  type: string
                createdAt:
                  type: string
                startedAt:
                  type: string
                finishedAt:
                  type: string
            submission:
              type: object
              required:
              - id
              - name
              properties:
                id:
                  type: string
                name:
                  type: string
            results:
              type: array
              items:
                type: object
                required:
                - id
                - value
                properties:
                  id:
                    type: string
                  value:
                    type: integer
      postproc:
        $ref: "#/definitions/RunHandle"
      schema:
        type: array
        items:
          type: object
          required:
          - id
          - name
          - type
          properties:
            id:
              type: string
            name:
              type: string
            type:
              type: string
      resources:
        type: array
        items:
          type: object
          required:
            - id
            - name
          properties:
            id:
              type: string
            name:
              type: string
            caption:
              type: string
  BenchmarkListing:
    type: object
    required:
    - benchmarks
    properties:
      benchmarks:
        type: array
        items:
          $ref: "#/definitions/BenchmarkDescriptor"
  BenchmarkParameter:
    type: object
    required:
    - id
    - name
    - datatype
    - index
    - required
    properties:
      id:
        type: string
      name:
        type: string
      datatype:
        type: string
      index:
        type: integer
      required:
        type: boolean
      description:
        type: string
      as:
        type: string
      defaultValue:
        type: string
      parent:
        type: string
      values:
        type: array
        items:
          type: object
          required:
          - value
          properties:
            name:
              type: string
            value:
              type: string
            isDefault:
              type: boolean
  FileHandle:
    type: object
    description: "Handle for uploaded file"
    required:
    - id
    - name
    - createdAt
    - size
    properties:
      id:
        type: string
      name:
        type: string
      createdAt:
        type: string
      size:
        type: number
  FileListing:
    type: object
    description: "List of handles for uploaded files"
    required:
    - files
    properties:
      files:
        type: array
        items:
          $ref: "#/definitions/FileHandle"
  RunArgument:
    type: object
    description: "Argument for a new benchmark run"
    required:
    - id
    - value
    properties:
      id:
        type: string
      value:
        type: string
      as:
        type: string
  RunDescriptor:
    type: object
    description: "Descriptor containing basic information for benchmark run"
    required:
    - id
    - state
    - createdAt
    properties:
      id:
        type: string
      state:
        type: string
      createdAt:
        type: string
  RunHandle:
    type: object
    description: "Handle containing all information for a benchmark run"
    required:
    - id
    - benchmark
    - parameters
    - arguments
    - state
    properties:
      id:
        type: string
      benchmark:
        type: string
      submission:
        type: string
      parameters:
        type: array
        items:
          $ref: '#/definitions/BenchmarkParameter'
      arguments:
        type: array
        items:
          $ref: "#/definitions/RunArgument"
      state:
        type: string
      startedAt:
        type: string
      finishedAt:
        type: string
      messages:
        type: array
        items:
          type: string
      files:
        type: array
        items:
          type: object
          required:
          - id
          - name
          properties:
            id:
              type: string
            name:
              type: string
            title:
              type: string
            caption:
              type: string
            widget:
              type: string
            format:
              type: object
  RunIdentifierListing:
    type: object
    description: "List of run identifier"
    required:
    - runs
    properties:
      runs:
        type: array
        items:
          type: string
  RunListing:
    type: object
    description: "Listing of run handles"
    required:
    - runs
    properties:
      runs:
        type: array
        items:
          $ref: "#/definitions/RunDescriptor"
  ServiceDescriptor:
    type: object
    description: "Descriptor containing basic service properties"
    required:
    - name
    - version
    - validToken
    - routes
    properties:
      name:
        type: string
      version:
        type: string
      validToken:
        type: boolean
      username:
        type: string
      routes:
        type: array
        items:
          type: object
          required:
          - action
          - pattern
          properties:
            action:
              type: string
            pattern:
              type: string
  SubmissionHandle:
    type: object
    description: Handle for benchmark submission
    required:
    - id
    - name
    - members
    - parameters
    - files
    - runs
    properties:
      id:
        type: string
      name:
        type: string
      members:
        type: array
        items:
          type: object
          required:
          - id
          - username
          properties:
            id:
              type: string
            username:
              type: string
      parameters:
        type: array
        items:
          $ref: '#/definitions/BenchmarkParameter'
      files:
        type: array
        items:
          $ref: "#/definitions/FileHandle"
      runs:
        type: array
        items:
          $ref: "#/definitions/RunHandle"
  SubmissionListing:
    type: object
    description: List of submission descriptors
    required:
    - submissions
    properties:
      submissions:
        type: array
        items:
          type: object
          required:
          - id
          - name
          - benchmark
          properties:
            id:
              type: string
            name:
              type: string
            benchmark:
              type: string
  UserCredentials:
    type: object
    description: "User login credentials"
    required:
    - username
    - password
    properties:
      username:
        type: string
      password:
        type: string
  UserHandle:
    type: object
    description: "Information about a registered user"
    required:
    - id
    - username
    properties:
      id:
        type: string
      username:
        type: string
      token:
        type: string
  UserListing:
    type: object
    description: "Identifier and name of a registered users"
    required:
    - users
    properties:
      users:
        type: array
        items:
          type: object
          required:
          - id
          - username
          properties:
            id:
              type: string
            username:
              type: string
  UserRegistration:
    type: object
    description: "Information about a new user"
    required:
    - username
    - password
    properties:
      username:
        type: string
      password:
        type: string
      verify:
        type: boolean
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
